#!/usr/bin/env bash

# Split into an array as we might have more than one domains to add.
IFS=',' read -ra DOMAIN_ARRAY <<< $DOMAIN

# Set the LE cert name based on the first domain provided.
LE_CERT_NAME=${DOMAIN_ARRAY[0]//\./-}

CERT_NAME=${LE_CERT_NAME}_$(date +"%Y%m%d%H%M%S")
CERT_PATH=/etc/letsencrypt/live/${LE_CERT_NAME}

if [[ $DRY_RUN =~ [yY] ]]; then
  echo Exiting as this is a dry run.
  exit 0
fi

oci_defaults=()
oci_defaults+=(--load-balancer-id ${LB_OCID})

oci lb certificate create ${oci_defaults[@]} \
  --certificate-name ${CERT_NAME} \
  --private-key-file ${CERT_PATH}/privkey.pem \
  --public-certificate-file ${CERT_PATH}/fullchain.pem \
  --wait-for-state SUCCEEDED

if [ $? -eq 0 ]; then
  echo "Successfully created certificate."

  if [ ! -z "$LISTENER_NAME" ]; then
    LB_DATA=$(oci lb load-balancer get ${oci_defaults[@]})

    DEFAULT_BACKEND_SET=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."default-backend-set-name"')
    LISTENER_PORT=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name].port')
    LISTENER_PROTOCOL=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name].protocol')
    PATH_ROUTE_SET_NAME=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."path-route-set-name"')
    CONNECTION_IDLE_TIMEOUT=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."connection-configuration"."idle-timeout"')
    BACKEND_TCP_PROXY_PROTOCOL_VERSION=$(echo $LB_DATA | jq -r --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."connection-configuration"."backend-tcp-proxy-protocol-version"')
    RULE_SET_NAMES=$(echo $LB_DATA | jq -rc --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."rule-set-names"')
    HOSTNAME_NAMES=$(echo $LB_DATA | jq -rc --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."hostname-names"')
    SSL_VERIFY_DEPTH=$(echo $LB_DATA | jq -rc --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."ssl-configuration"."verify-depth"')
    SSL_VERIFY_PEER_CERTIFICATE=$(echo $LB_DATA | jq -rc --arg listener_name "$LISTENER_NAME" \
      '.data.listeners[$listener_name]."ssl-configuration"."verify-peer-certificate"')
    CIPHER_SUITE_NAME=$(echo $LB_DATA | jq -rc --arg listener_name "${LISTENER_NAME}" \
      '.data.listeners[$listener_name]."ssl-configuration"."cipher-suite-name"')
    PROTOCOLS=$(echo $LB_DATA | jq -rc --arg listener_name "${LISTENER_NAME}" \
      '.data.listeners[$listener_name]."ssl-configuration"."protocols"')
    SERVER_ORDER_PREFERENCE=$(echo $LB_DATA | jq -rc --arg listener_name "${LISTENER_NAME}" \
      '.data.listeners[$listener_name]."ssl-configuration"."server-order-preference"')

    params=()
    params+=${oci_defaults[@]}
    params+=(--default-backend-set-name ${DEFAULT_BACKEND_SET})
    if [[ $BACKEND_TCP_PROXY_PROTOCOL_VERSION =~ '^[0-9]+$' ]]; then
      params+=(--connection-configuration-backend-tcp-proxy-protocol-version ${BACKEND_TCP_PROXY_PROTOCOL_VERSION})
    fi
    params+=(--listener-name ${LISTENER_NAME})
    params+=(--port ${LISTENER_PORT})
    params+=(--protocol ${LISTENER_PROTOCOL})
    params+=(--path-route-set-name ${PATH_ROUTE_SET_NAME})
    params+=(--rule-set-names ${RULE_SET_NAMES})
    params+=(--hostname-names ${HOSTNAME_NAMES})
    params+=(--connection-configuration-idle-timeout ${CONNECTION_IDLE_TIMEOUT})
    params+=(--ssl-verify-depth ${SSL_VERIFY_DEPTH})
    params+=(--ssl-verify-peer-certificate ${SSL_VERIFY_PEER_CERTIFICATE})
    params+=(--ssl-certificate-name ${CERT_NAME})
    params+=(--cipher-suite-name ${CIPHER_SUITE_NAME});
    params+=(--protocols ${PROTOCOLS});
    params+=(--server-order-preference ${SERVER_ORDER_PREFERENCE});
    params+=(--force)
    params+=(--wait-for-state SUCCEEDED)

    oci lb listener update \
      ${params[@]}
    
    # Delete old certificates if listenet update succeeded
    if [ $? -eq 0 ]; then
    
      # Get existing certificate list for deleting old certificates
      CERT_LIST=$(oci lb certificate list ${oci_defaults[@]});

      # Loop certificate names that start with domain name
      echo ${CERT_LIST} | jq -rc --arg cert_prefix ${LE_CERT_NAME} \
        '.data[]."certificate-name" | select(startswith($cert_prefix))' \
      | while IFS= read -r CERT_OLD;
      do
        # Delete certificate if certificate name is not same that just uploaded
        # Note! deletion will fail if certificate is used in listener or backend set
        if [[ "${CERT_NAME}" != "${CERT_OLD}" ]]; then
          oci lb certificate delete ${oci_defaults[@]} \
            --certificate-name "${CERT_OLD}" \
            --force
        fi
      done
    fi
  else
    echo "Please remember to create the HTTPS listener and assign the certificate $CERT_NAME manually."
  fi
else
  echo "Failed to create certificate."
fi
